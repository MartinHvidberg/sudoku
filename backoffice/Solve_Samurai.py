
""" Solves a Samurai (x5 SuDoKu)
    if all solutions to each of the 5 SuDoKu's are given
"""

import pprint

# This output only comes on screen - so that is a bit of a dis-advantage, but a() can't do better...
data = """
/home/martin/Repos/sudoku/venv/bin/python /home/martin/Repos/sudoku/sudoku/check_sudokus_for_multisolutions.py 
input ->  ..7..9.2.25.1.4..8..1.5...6......3....6.....7.94....52....83.69913.7....6.8.9.2..  # [TL] Politiken Samurai 2.23-12-25
      -> |007009020250104008001050006000000300006000007094000052000083069913070000608090200|
solution: 467839521259164738831257496785926314126345987394718652572483169913672845648591273
solution: 467839521259164738831257946185726394326945817794318652572483169913672485648591273
solution: 467839521259164738831257946785926314126345897394718652572483169913672485648591273
solution: 467839521259164738831752946185627394326945817794318652572483169913276485648591273
input ->  .7...94.1...7.....4.1.3...5...1....3..369...78.4.57......82..19...9.....9.84.5.7.  # [TR] Politiken Samurai
      -> |070009401000700000401030005000100003003690007804057000000820019000900000908405070|
solution: 276589431359714268481236795567142983123698547894357126745823619632971854918465372
solution: 276589431359714268481236795765142983123698547894357126547823619632971854918465372
solution: 276589431539714268481236795627148953153692847894357126745823619362971584918465372
solution: 276589431539714268481236795657142983123698547894357126745823619362971854918465372
solution: 276589431539714268481236795762148953153692847894357126647823519325971684918465372
solution: 372589461569714238481236795627148953153692847894357126745823619236971584918465372
solution: 372589461569714238481236795627148953153692847894357126746823519235971684918465372
solution: 372589461569714238481236795657142983123698547894357126745823619236971854918465372
solution: 372589461569714238481236795726148953153692847894357126647823519235971684918465372
solution: 372589461659714238481236795567142983123698547894357126745823619236971854918465372
solution: 372589461659714238481236795765142983123698547894357126547823619236971854918465372
solution: 672589431359714268481236795567142983123698547894357126745823619236971854918465372
solution: 672589431359714268481236795765142983123698547894357126547823619236971854918465372
solution: 672589431539714268481236795267148953153692847894357126745823619326971584918465372
solution: 672589431539714268481236795267148953153692847894357126746823519325971684918465372
input ->  .69832............2....49.87..2..359.58.7.4.6..29.........23.9..9.5...645......8.  # [CC] Politiken Samurai 2.23-12-25
      -> |069832000000000000200004908700200359058070406002900000000023090090500064500000080|
solution: 169832547483759612275164938714286359958371426632945871841623795397518264526497183
solution: 169832547483759612275164938741286359958371426632945871814623795397518264526497183
solution: 169832547483759612275164938741286359958371426632945871816423795397518264524697183
solution: 169832547483759612275614938714268359958371426632945871846123795391587264527496183
solution: 169832547485197632273654918714286359958371426632945871846723195397518264521469783
solution: 169832547485197632273654918741286359958371426632945871816423795397518264524769183
solution: 169832547485719632273654918714268359958371426632945871846123795391587264527496183
solution: 169832547843759612275164938714286359958371426632945871481623795397518264526497183
solution: 169832547843759612275614938714268359958371426632945871486123795391587264527496183
solution: 169832547843759612275614938716248359958371426432965871684123795391587264527496183
solution: 169832547843759612275614938716248359958371426432965871687423195391587264524196783
solution: 169832547843795612275164938716248359958371426432956871687423195391587264524619783
solution: 169832547843795612275614938716248359958371426432956871684123795391587264527469183
solution: 169832547843795612275614938716248359958371426432956871687423195391587264524169783
solution: 169832547845197632273654918714286359958371426632945871486723195397518264521469783
solution: 169832547845719632273654918714268359958371426632945871486123795391587264527496183
solution: 169832547845719632273654918716248359958371426432965871684123795391587264527496183
solution: 169832547845719632273654918716248359958371426432965871687423195391587264524196783
solution: 169832745483759612275164938714286359958371426632945871841623597397518264526497183
solution: 169832745483759612275164938741286359958371426632945871814623597397518264526497183
solution: 169832745483759612275164938741286359958371426632945871816423597397518264524697183
solution: 169832745483759612275614938714268359958371426632945871846123597391587264527496183
solution: 169832745485197632273654918741286359958371426632945871816423597397518264524769183
solution: 169832745485719632273654918714268359958371426632945871846123597391587264527496183
solution: 169832745843759612275164938714286359958371426632945871481623597397518264526497183
solution: 169832745843759612275614938714268359958371426632945871486123597391587264527496183
solution: 169832745843759612275614938716248359958371426432965871684123597391587264527496183
solution: 169832745843795612275614938716248359958371426432956871684123597391587264527469183
solution: 169832745845719632273654918714268359958371426632945871486123597391587264527496183
solution: 169832745845719632273654918716248359958371426432965871684123597391587264527496183
solution: 469832175385719642217654938741268359958371426632945817876423591193587264524196783
solution: 469832175831759642275614938716248359958371426342965817687423591193587264524196783
solution: 469832175831795642275164938716248359958371426342956817687423591193587264524619783
solution: 469832175831795642275614938716248359958371426342956817687423591193587264524169783
solution: 469832175835719642271654938716248359958371426342965817687423591193587264524196783
solution: 469832517183759642275164938714286359958371426632945871841623795397518264526497183
solution: 469832517183759642275164938741286359958371426632945871814623795397518264526497183
solution: 469832517183759642275164938741286359958371426632945871816423795397518264524697183
solution: 469832517183759642275614938714268359958371426632945871846123795391587264527496183
solution: 469832517381759642275614938714268359958371426632945871846123795193587264527496183
solution: 469832517385719642217654938741268359958371426632945871876423195193587264524196783
solution: 469832517385719642271654938714268359958371426632945871846123795193587264527496183
solution: 469832517813759642275164938741286359958371426632945871184623795397518264526497183
solution: 469832517813759642275164938741286359958371426632945871186423795397518264524697183
solution: 469832517831759642275614938716248359958371426342965871684123795193587264527496183
solution: 469832517831759642275614938716248359958371426342965871687423195193587264524196783
solution: 469832517831795642275164938716248359958371426342956871687423195193587264524619783
solution: 469832517831795642275614938716248359958371426342956871684123795193587264527469183
solution: 469832517831795642275614938716248359958371426342956871687423195193587264524169783
solution: 469832517835719642271654938716248359958371426342965871684123795193587264527496183
solution: 469832517835719642271654938716248359958371426342965871687423195193587264524196783
solution: 469832517873159642215764938741286359958371426632945871184623795397518264526497183
solution: 469832517873159642215764938741286359958371426632945871186423795397518264524697183
solution: 469832571183759642275164938714286359958371426632945817841623795397518264526497183
solution: 469832571183759642275164938741286359958371426632945817814623795397518264526497183
solution: 469832571183759642275164938741286359958371426632945817816423795397518264524697183
solution: 469832571183759642275614938714268359958371426632945817846123795391587264527496183
solution: 469832571381759642275614938714268359958371426632945817846123795193587264527496183
solution: 469832571385719642217654938741268359958371426632945817876423195193587264524196783
solution: 469832571385719642271654938714268359958371426632945817846123795193587264527496183
solution: 469832571813759642275164938741286359958371426632945817184623795397518264526497183
solution: 469832571813759642275164938741286359958371426632945817186423795397518264524697183
solution: 469832571831759642275614938716248359958371426342965817684123795193587264527496183
solution: 469832571831759642275614938716248359958371426342965817687423195193587264524196783
solution: 469832571831795642275164938716248359958371426342956817687423195193587264524619783
solution: 469832571831795642275614938716248359958371426342956817684123795193587264527469183
solution: 469832571831795642275614938716248359958371426342956817687423195193587264524169783
solution: 469832571835719642271654938716248359958371426342965817684123795193587264527496183
solution: 469832571835719642271654938716248359958371426342965817687423195193587264524196783
solution: 469832571873159642215764938741286359958371426632945817184623795397518264526497183
solution: 469832571873159642215764938741286359958371426632945817186423795397518264524697183
solution: 469832715183759642275164938714286359958371426632945871841623597397518264526497183
solution: 469832715183759642275164938741286359958371426632945871814623597397518264526497183
solution: 469832715183759642275164938741286359958371426632945871816423597397518264524697183
solution: 469832715183759642275614938714268359958371426632945871846123597391587264527496183
solution: 469832715381759642275614938714268359958371426632945871846123597193587264527496183
solution: 469832715385719642271654938714268359958371426632945871846123597193587264527496183
solution: 469832715813759642275164938741286359958371426632945871184623597397518264526497183
solution: 469832715813759642275164938741286359958371426632945871186423597397518264524697183
solution: 469832715831759642275614938716248359958371426342965871684123597193587264527496183
solution: 469832715831795642275614938716248359958371426342956871684123597193587264527469183
solution: 469832715835719642271654938716248359958371426342965871684123597193587264527496183
solution: 469832715873159642215764938741286359958371426632945871184623597397518264526497183
solution: 469832715873159642215764938741286359958371426632945871186423597397518264524697183
input ->  ..3........72.8.9.6..13.5..7.23...4513....6...9.....1....9..76..7.81.9529....6.3.  # [LL] Politiken Samurai 2.23-12-25
      -> |003000000007208090600130500702300045130000600090000010000900760070810952900006030|
solution: 213579486547268391689134527762391845135482679894657213321945768476813952958726134
solution: 243569187517248396689137524762391845135482679498675213824953761376814952951726438
solution: 243569187517248396689137524762391845135482679498675213854923761376814952921756438
solution: 243569187517248396689137524762391845135482679894675213321954768476813952958726431
solution: 243569187517248396689137524762391845135482679894675213328954761476813952951726438
solution: 243569187517248396689137524762391845135482679894675213351924768476813952928756431
solution: 243569187517248396689137524762391845135482679894675213358924761476813952921756438
solution: 243569187517248396689137524762391845135482679894675213421953768376814952958726431
solution: 243569187517248396689137524762391845135482679894675213428953761376814952951726438
solution: 243569187517248396689137524762391845135482679894675213451923768376814952928756431
solution: 243569187517248396689137524762391845135482679894675213458923761376814952921756438
solution: 243579186517268394689134527762391845135482679894657213321945768476813952958726431
solution: 243579186517268394689134527762391845135482679894657213328945761476813952951726438
solution: 243659187517248396689137524762391845135482679498765213854923761376814952921576438
solution: 243659187517248396689137524762391845135482679894765213351924768476813952928576431
solution: 243659187517248396689137524762391845135482679894765213358924761476813952921576438
solution: 243659187517248396689137524762391845135482679894765213451923768376814952928576431
solution: 243659187517248396689137524762391845135482679894765213458923761376814952921576438
solution: 253649187417258396689137524762391845135482679894765213541923768376814952928576431
solution: 253649187417258396689137524762391845135482679894765213548923761376814952921576438
solution: 423569187517248396689137524762391845135482679894675213241953768376814952958726431
solution: 423569187517248396689137524762391845135482679894675213248953761376814952951726438
solution: 483569127517248396629137584762391845135482679894675213241953768376814952958726431
solution: 483569127517248396629137584762391845135482679894675213248953761376814952951726438
solution: 813549276457268193629137584762391845138475629594682317241953768376814952985726431
solution: 813549276547268193629137584762391845138475629495682317284953761376814952951726438
solution: 843569127517248396629137584762391845135482679498675213284953761376814952951726438
input ->  .9..42....64.....8.8.5.97.2..9..8..5.7...1..........1....9.5..6...3..5....7.1428.  # [LR] Politiken Samurai 2.23-12-25
      -> |090042000064000008080509702009008005070001000000000010000905006000300500007014280|
solution: 795842361264173958183569742419738625876251439532496817348925176621387594957614283
solution: 795842361264173958381569742149738625672451839538296417423985176816327594957614283
solution: 795842361264173958381569742149738625678251439523496817432985176816327594957614283
solution: 795842361264173958381569742149738625678251439532496817423985176816327594957614283
solution: 795842361264173958381569742149738625876251439523496817432985176618327594957614283
solution: 795842361264173958381569742149738625876251439523496817438925176612387594957614283
solution: 795842361264173958381569742149738625876251439532496817423985176618327594957614283
solution: 795842361264173958381569742419738625672451839538296417843925176126387594957614283
solution: 795842361264173958381569742419738625678251439532496817843925176126387594957614283
solution: 795842361264173958381569742619738425478251639532496817843925176126387594957614283
solution: 795842361264173958381569742619738425872451639543296817438925176126387594957614283
solution: 795842631264173958381569742129738465673451829548296317432985176816327594957614283
solution: 795842631264173958381569742129738465678451329543296817432985176816327594957614283
solution: 795842631264173958381569742129738465876451329543296817432985176618327594957614283
solution: 795842631264173958381569742129738465876451329543296817438925176612387594957614283
solution: 795842631264173958381569742619738425478251369532496817843925176126387594957614283
solution: 795842631264173958381569742619738425872451369543296817438925176126387594957614283
"""

# Read in
lst_pos = ["[TL]", "[TR]", "[CC]", "[LL]", "[LR]"]  # Indicators of position, expected in the 'input ->' lines
dic_solus = dict()
str_current_position = None
for line in data.split('\n'):
    if line.startswith("input ->"):
        if any(line.find(tok) >= 0 for tok in lst_pos):
            for pos in lst_pos:
                if line.find(pos) >= 0:
                    pos = pos.replace("[", "").replace("]", "")
                    str_current_position = pos  # Note the position we are currently at
                    if pos not in dic_solus.keys():
                        dic_solus[pos] = list()  # Create a list to put the solutions in
    if line.startswith("solution:"):
        dic_solus[str_current_position].append(line[10:].strip())
del str_current_position, line, pos, data
# pprint.pprint(dic_solus)

# Eliminate invalid CC solutions
filter_tl = [0, 1, 2, 9, 10, 11, 18, 19, 20]  # the positions of 81 that represents TL box
# filter_tc= [3, 4, 5, 12, 13, 14, 21, 22, 23]
filter_tr= [6, 7, 8, 15, 16, 17, 24, 25, 26]
# filter_cl= [27, 28, 29, 36, 37, 38, 45, 46, 47]
# filter_cc= [30, 31, 32, 39, 40, 41, 48, 49, 50]
# filter_cr= [33, 34, 35, 42, 43, 44, 51, 52, 53]
filter_ll= [54, 55, 56, 63, 64, 65, 72, 73, 74]
# filter_lc= [57, 58, 59, 66, 67, 68, 75, 76, 77]
filter_lr= [60, 61, 62, 69, 70, 71, 78, 79, 80]
lst_fltr = filter_tl, filter_tr, filter_ll, filter_lr

print(f"Initial number of TL, TR, CC, LL, LR solutions: {len(dic_solus['TL'])}, {len(dic_solus['TR'])}, {len(dic_solus['CC'])}, {len(dic_solus['LL'])}, {len(dic_solus['LR'])}")
# Handle TL overlap
print(f"->CC/TL: matching overlap between {len(dic_solus['CC'])} CC and {len(dic_solus['TL'])} TL")
lst_cc_pass = list()
lst_tl_pass = list()
for solcc in dic_solus['CC']:
    lst_99_cctl = [solcc[n] for n in filter_tl]  # The 9x9 in CC that overlaps TL
    for soltl in dic_solus['TL']:
        lst_99_tlcc = [soltl[n] for n in filter_lr]  # The 9x9 in TL that overlaps CC
        if lst_99_tlcc == lst_99_cctl:
            lst_cc_pass.append(solcc)
            lst_tl_pass.append(soltl)
dic_solus['CC'] = list(set(lst_cc_pass))
dic_solus['TL'] = list(set(lst_tl_pass))
print(f"  CC/TL: number of CC solutions: {len(dic_solus['CC'])}")
print(f"  CC/TL: number of TL solutions: {len(dic_solus['TL'])}")

# Handle TR overlap
print(f"->CC/TR: matching overlap between {len(dic_solus['CC'])} CC and {len(dic_solus['TR'])} TR")
lst_cc_pass = list()
lst_tr_pass = list()
for solcc in dic_solus['CC']:
    lst_99_cctr = [solcc[n] for n in filter_tr]  # The 9x9 in CC that overlaps TR
    for soltr in dic_solus['TR']:
        lst_99_trcc = [soltr[n] for n in filter_ll]  # The 9x9 in TR that overlaps CC
        if lst_99_trcc == lst_99_cctr:
            lst_cc_pass.append(solcc)
            lst_tr_pass.append(soltr)
dic_solus['CC'] = list(set(lst_cc_pass))
dic_solus['TR'] = list(set(lst_tr_pass))
print(f"  CC/TR: number of CC solutions: {len(dic_solus['CC'])}")
print(f"  CC/TR: number of TR solutions: {len(dic_solus['TR'])}")

# Handle LL overlap
print(f"->CC/LL: matching overlap between {len(dic_solus['CC'])} CC and {len(dic_solus['LL'])} LL")
lst_cc_pass = list()
lst_ll_pass = list()
for solcc in dic_solus['CC']:
    lst_99_ccll = [solcc[n] for n in filter_ll]  # The 9x9 in CC that overlaps LL
    for solll in dic_solus['LL']:
        lst_99_llcc = [solll[n] for n in filter_tr]  # The 9x9 in LL that overlaps CC
        if lst_99_llcc == lst_99_ccll:
            lst_cc_pass.append(solcc)
            lst_ll_pass.append(solll)
dic_solus['CC'] = list(set(lst_cc_pass))
dic_solus['LL'] = list(set(lst_ll_pass))
print(f"  CC/LL: number of CC solutions: {len(dic_solus['CC'])}")
print(f"  CC/LL: number of LL solutions: {len(dic_solus['LL'])}")

# Handle LR overlap
print(f"->CC/LR: matching overlap between {len(dic_solus['CC'])} CC and {len(dic_solus['LR'])} LR")
lst_cc_pass = list()
lst_lr_pass = list()
for solcc in dic_solus['CC']:
    lst_99_cclr = [solcc[n] for n in filter_lr]  # The 9x9 in CC that overlaps LR
    for solrl in dic_solus['LR']:
        lst_99_lrcc = [solrl[n] for n in filter_tl]  # The 9x9 in LR that overlaps CC
        if lst_99_lrcc == lst_99_cclr:
            lst_cc_pass.append(solcc)
            lst_lr_pass.append(solrl)
dic_solus['CC'] = list(set(lst_cc_pass))
dic_solus['LR'] = list(set(lst_lr_pass))
print(f"  CC/LR: number of CC solutions: {len(dic_solus['CC'])}")
print(f"  CC/LR: number of LR solutions: {len(dic_solus['LR'])}")
del lst_99_tlcc, lst_99_cctl, lst_99_trcc, lst_99_cctr, lst_99_llcc, lst_99_ccll, lst_99_lrcc, lst_99_cclr

#  Filter corner solutions to fit the, hopefully one-and-only, CC solution
if len(dic_solus['CC']) == 1:
    solcc = dic_solus['CC'][0]
    print(f"Post-match number of CC solutions: {len(dic_solus['CC'])}")
    for cor in [('TL', filter_tl, filter_lr),
                ('TR', filter_tr, filter_ll),
                ('LL', filter_ll, filter_tr),
                ('LR', filter_lr, filter_tl)]:
        str_cc = 'CC'
        str_xx = cor[0]
        flt_cc = cor[1]
        flt_xx = cor[2]
        lst_cor_pass = list()
        print(f"->Corner-fit: {cor[0]} : testing {len(dic_solus[str_xx])} solutions")
        for solxx in dic_solus[str_xx]:
            if [solcc[n] for n in flt_cc] == [solxx[n] for n in flt_xx]:
                lst_cor_pass.append(solxx)
        dic_solus[str_xx] = lst_cor_pass
        print(f"              {cor[0]} : {len(dic_solus[str_xx])} solutions")
else:
    print(f"Huston: We have a problem. There are {len(dic_solus['CC'])} valid CC solutions that fit all 4 corners")

print()
tl = dic_solus['TL'][0]
tr = dic_solus['TR'][0]
ll = dic_solus['LL'][0]
lr = dic_solus['LR'][0]
cc = dic_solus['CC'][0]
str_pp = (f"{tl[0]}{tl[1]}{tl[2]} | {tl[3]}{tl[4]}{tl[5]} | {tl[6]}{tl[7]}{tl[8]}         {tr[0]}{tr[1]}{tr[2]} | {tr[3]}{tr[4]}{tr[5]} | {tr[6]}{tr[7]}{tr[8]}\n"
          f"{tl[9]}{tl[10]}{tl[11]} | {tl[12]}{tl[13]}{tl[14]} | {tl[15]}{tl[16]}{tl[17]}         {tr[9]}{tr[10]}{tr[11]} | {tr[12]}{tr[13]}{tr[14]} | {tr[15]}{tr[16]}{tr[17]}\n"
          f"{tl[18]}{tl[19]}{tl[20]} | {tl[21]}{tl[22]}{tl[23]} | {tl[24]}{tl[25]}{tl[26]}         {tr[18]}{tr[19]}{tr[20]} | {tr[21]}{tr[22]}{tr[23]} | {tr[24]}{tr[25]}{tr[26]}\n"
          f"--- | --- | ---         --- | --- | ---\n"
          f"{tl[27]}{tl[28]}{tl[29]} | {tl[30]}{tl[31]}{tl[32]} | {tl[33]}{tl[34]}{tl[35]}         {tr[27]}{tr[28]}{tr[29]} | {tr[30]}{tr[31]}{tr[32]} | {tr[33]}{tr[34]}{tr[35]}\n"
          f"{tl[36]}{tl[37]}{tl[38]} | {tl[39]}{tl[40]}{tl[41]} | {tl[42]}{tl[43]}{tl[44]}         {tr[36]}{tr[37]}{tr[38]} | {tr[39]}{tr[40]}{tr[41]} | {tr[42]}{tr[43]}{tr[44]}\n"
          f"{tl[45]}{tl[46]}{tl[47]} | {tl[48]}{tl[49]}{tl[50]} | {tl[51]}{tl[52]}{tl[53]}         {tr[45]}{tr[46]}{tr[47]} | {tr[48]}{tr[49]}{tr[50]} | {tr[51]}{tr[52]}{tr[53]}\n"
          f"--- | --- | ---         --- | --- | ---\n"
          f"{tl[54]}{tl[55]}{tl[56]} | {tl[57]}{tl[58]}{tl[59]} | {tl[60]}{tl[61]}{tl[62]} | {cc[3]}{cc[4]}{cc[5]} | {tr[54]}{tr[55]}{tr[56]} | {tr[57]}{tr[58]}{tr[59]} | {tr[60]}{tr[61]}{tr[62]}\n"
          f"{tl[63]}{tl[64]}{tl[65]} | {tl[66]}{tl[67]}{tl[68]} | {tl[69]}{tl[70]}{tl[71]} | {cc[12]}{cc[13]}{cc[14]} | {tr[63]}{tr[64]}{tr[65]} | {tr[66]}{tr[67]}{tr[68]} | {tr[69]}{tr[70]}{tr[71]}\n"
          f"{tl[72]}{tl[73]}{tl[74]} | {tl[75]}{tl[76]}{tl[77]} | {tl[78]}{tl[79]}{tl[80]} | {cc[21]}{cc[22]}{cc[23]} | {tr[72]}{tr[73]}{tr[74]} | {tr[75]}{tr[76]}{tr[77]} | {tr[78]}{tr[79]}{tr[80]}\n"
          f"            --- | --- | ---\n"
          f"            {cc[27]}{cc[28]}{cc[29]} | {cc[30]}{cc[31]}{cc[32]} | {cc[33]}{cc[34]}{cc[35]} \n"
          f"            {cc[36]}{cc[37]}{cc[38]} | {cc[39]}{cc[40]}{cc[41]} | {cc[42]}{cc[43]}{cc[44]} \n"
          f"            {cc[45]}{cc[46]}{cc[47]} | {cc[48]}{cc[49]}{cc[50]} | {cc[51]}{cc[52]}{cc[53]} \n"
          f"            --- | --- | ---\n"
          f"{ll[0]}{ll[1]}{ll[2]} | {ll[3]}{ll[4]}{ll[5]} | {ll[6]}{ll[7]}{ll[8]} | {cc[57]}{cc[58]}{cc[59]} | {lr[0]}{lr[1]}{lr[2]} | {lr[3]}{lr[4]}{lr[5]} | {lr[6]}{lr[7]}{lr[8]}\n"
          f"{ll[9]}{ll[10]}{ll[11]} | {ll[12]}{ll[13]}{ll[14]} | {ll[15]}{ll[16]}{ll[17]} | {cc[66]}{cc[67]}{cc[68]} | {lr[9]}{lr[10]}{lr[11]} | {lr[12]}{lr[13]}{lr[14]} | {lr[15]}{lr[16]}{lr[17]}\n"
          f"{ll[18]}{ll[19]}{ll[20]} | {ll[21]}{ll[22]}{ll[23]} | {ll[24]}{ll[25]}{ll[26]} | {cc[75]}{cc[76]}{cc[77]} | {lr[18]}{lr[19]}{lr[20]} | {lr[21]}{lr[22]}{lr[23]} | {lr[24]}{lr[25]}{lr[26]}\n"
          f"--- | --- | ---         --- | --- | ---\n"
          f"{ll[27]}{ll[28]}{ll[29]} | {ll[30]}{ll[31]}{ll[32]} | {ll[33]}{ll[34]}{ll[35]}         {lr[27]}{lr[28]}{lr[29]} | {lr[30]}{lr[31]}{lr[32]} | {lr[33]}{lr[34]}{lr[35]}\n"
          f"{ll[36]}{ll[37]}{ll[38]} | {ll[39]}{ll[40]}{ll[41]} | {ll[42]}{ll[43]}{ll[44]}         {lr[36]}{lr[37]}{lr[38]} | {lr[39]}{lr[40]}{lr[41]} | {lr[42]}{lr[43]}{lr[44]}\n"
          f"{ll[45]}{ll[46]}{ll[47]} | {ll[48]}{ll[49]}{ll[50]} | {ll[51]}{ll[52]}{ll[53]}         {lr[45]}{lr[46]}{lr[47]} | {lr[48]}{lr[49]}{lr[50]} | {lr[51]}{lr[52]}{lr[53]}\n"
          f"--- | --- | ---         --- | --- | ---\n"
          f"{ll[54]}{ll[55]}{ll[56]} | {ll[57]}{ll[58]}{ll[59]} | {ll[60]}{ll[61]}{ll[62]}         {lr[54]}{lr[55]}{lr[56]} | {lr[57]}{lr[58]}{lr[59]} | {lr[60]}{lr[61]}{lr[62]}\n"
          f"{ll[63]}{ll[64]}{ll[65]} | {ll[66]}{ll[67]}{ll[68]} | {ll[69]}{ll[70]}{ll[71]}         {lr[63]}{lr[64]}{lr[65]} | {lr[66]}{lr[67]}{lr[68]} | {lr[69]}{lr[70]}{lr[71]}\n"
          f"{ll[72]}{ll[73]}{ll[74]} | {ll[75]}{ll[76]}{ll[77]} | {ll[78]}{ll[79]}{ll[80]}         {lr[72]}{lr[73]}{lr[74]} | {lr[75]}{lr[76]}{lr[77]} | {lr[78]}{lr[79]}{lr[80]}\n")

print(str_pp)